---
pred_bat:
  module: predbat
  class: PredBat

  # Timezone to work in  
  timezone: Europe/London
  
  # Set these to match your own GivTCP names, will need updating with your serial number
  soc_kw: sensor.givtcp_sa2243g277_soc_kwh
  soc_percent: number.givtcp_sa2243g277_target_soc
  soc_max: sensor.givtcp_sa2243g277_battery_capacity_kwh
  reserve: number.givtcp_sa2243g277_battery_power_reserve
  load_today: sensor.givtcp_sa2243g277_load_energy_today_kwh
  charge_enable: switch.givtcp_sa2243g277_enable_charge_schedule
  charge_start_time: select.givtcp_sa2243g277_charge_start_time_slot_1
  charge_end_time: select.givtcp_sa2243g277_charge_end_time_slot_1
  charge_limit: number.givtcp_sa2243g277_target_soc
  charge_rate: number.givtcp_sa2243g277_battery_charge_rate
  discharge_rate: number.givtcp_sa2243g277_battery_discharge_rate
  import_today: sensor.givtcp_sa2243g277_import_energy_today_kwh
  
  # Set these to match solcast sensor names (unlikely to need changing)
  pv_forecast_today: sensor.solcast_forecast_today
  pv_forecast_tomorrow: sensor.solcast_forecast_tomorrow
  pv_forecast_d3: sensor.solcast_forecast_d3
  pv_forecast_d4: sensor.solcast_forecast_d4

  # For pv estimate, leave blank for central estimate, or add 10 for 10% curve (worst case) or 90 or 90% curve (best case)
  # If you use 10 then disable pv_metric10_weight below
  # pv_estimate: 10
  
  # Battery loss accounts for energy lost charging the battery, 0.05 is 5%
  battery_loss: 0.05

  # Scaling factor applied to historial load, tune up if you want to be more pessimistic on future consumption
  # Use 1.0 to use exactly previous load data (1.1 would add 10% to load)
  load_scaling: 1.0

  # Days previous is the number of days back to find historical load data
  days_previous: 7

  # Scaling factor applied to pv data, tune down if you want to be more pessimistic on PV production vs Solcast
  # Use 1.0 to use exactly the solcast data (0.9 would remove 10% from forecast)
  pv_scaling: 1.0

  # Weighting given to the 10% PV scenario, comment out or put to 0.0 to disable this
  # A value of 0.1 assumes that 1:10 times we get the 10% scenario and hence to count this in the metric benefit/cost
  pv_metric10_weight: 0.1
  
  # Number of hours forward to forecast
  forecast_hours: 48
  
  # When car charging hold is enable loads of above theshold kwh are ignored in the simulation
  # Or if an incrementing energy sensor is provided actuals can be subtracted
  car_charging_hold: True
  car_charging_energy: sensor.wallbox_portal_added_energy
  car_charging_threshold: 6.0
  
  # Enable calculate best to work out the best battery SOC % based on cost
  calculate_best: True
  # best_soc margin : added to the final SOC estimate (in kwh) to set the battery charge level (pushes it up). 
  #                   Best not used with multiple charge windows as it tends up limit everything.
  # best_soc_min : sets the minimum charge level (in kwh) for overnight charging
  # best_soc_keep : is minimum battery level to try to keep above during the whole period of the simulation time
  best_soc_margin: 0
  best_soc_min: 2
  best_soc_keep: 2
    
  # Metric min improvement sets the minimum cost improvement that it's worth lowering the battery SOC % for
  # If it's 0 then this is disabled. A figure of around 5 (which is 5p) is a good one to use if enabled.
  # If you use pv_metric10_weight then you probably don't need to enable this as the 10% forecast does the same thing better
  metric_min_improvement: 0

  # Energy rates
  # Please set one of these three, if multiple are set then Octopus is used first, second rates_import/rates_export and latestly basic metric
  
  # Set import and export entity to point to the Octopus Energy plugin
  # Needs updating with your meter number
  # Or comment out if you don't have them
  metric_octopus_import: sensor.octopus_energy_electricity_20l3260392_2200017612712_current_rate
  metric_octopus_export: sensor.octopus_energy_electricity_20l3260392_2200043522155_export_current_rate
  
  # Or set your actual rates across time for import and export
  # If start/end is missing it's assumed to be a fixed rate
  # Gaps are filled with metric_house from above
  rates_import:
    -  start: "23:30:00"
       end: "05:30:00"
       rate: 7.5
    -  start: "05:30:00"
       end: "23:30:00"
       rate: 40.0
       
  rates_export:
    -  rate: 7.5

  # Can be used instead of the plugin to get import rates directly online
  # Overrides metric_octopus_import and rates_import
  # rates_import_octopus_url : "https://api.octopus.energy/v1/products/AGILE-FLEX-22-11-25/electricity-tariffs/E-1R-AGILE-FLEX-22-11-25-H/standard-unit-rates"
  # rates_import_octopus_url : "https://api.octopus.energy/v1/products/FLUX-IMPORT-23-02-14/electricity-tariffs/E-1R-FLUX-IMPORT-23-02-14-A/standard-unit-rates"
  
  # Overrides metric_octopus_export and rates_export
  # rates_export_octopus_url: "https://api.octopus.energy/v1/products/FLUX-EXPORT-BB-23-02-14/electricity-tariffs/E-1R-FLUX-EXPORT-BB-23-02-14-A/standard-unit-rates"

  # Or set rates to be assumed for imports for the house, charging the battery and exports
  # this method will not allow automatic setting of charging windows
  metric_house: 38
  metric_battery: 7.5
  metric_export: 4.2
  
  # If you have Octopus intelligent, enable the intelligent slot information to add to pricing
  # Or comment out if you don't
  octopus_intelligent_slot: binary_sensor.octopus_intelligent_slot
  
  # Threshold below average rates as the minimum to consider for a charge window, 0.8 = 80% of average rate
  rate_low_threshold: 0.8
  
  # When enabled the next charge window will be automatically configured based on the incoming rates
  # Only works if the charging time window has been enabled and import rates are configured with the rates_import or using Octopus import
  # Set window minutes defines how many minutes before the charge window we should program it (do not set above 30 if you are using Agile or similar)
  set_charge_window: True
  set_window_notify: True
  set_window_minutes: 30
  
  # When enable automatically set the battery SOC charge amount a defined number of minutes before charging starts
  # note it maybe set more than once if things change
  set_soc_enable: True
  set_soc_notify: True
  set_soc_minutes: 30
  
  # Set the frequency in minutes that this plugin is run
  # recommend something that divides by 60 (5, 10 or 15) or you won't trigger at the start of energy price slots
  run_every: 10
  
  # Debug enable prints lots of debug, leave off by default
  debug_enable: False
